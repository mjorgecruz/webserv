/*To implement a login system and transfer cookies in a web server, you need to handle HTTP requests and responses, manage user sessions, and set cookies in the HTTP headers. Here's a step-by-step guide to achieve this:

Step 1: Handle Login Requests
Parse Login Requests: Parse the HTTP request to extract login credentials (e.g., username and password).
Authenticate User: Verify the credentials against a user database.
Generate Session ID: If authentication is successful, generate a unique session ID.
Set Cookie: Include the session ID in a Set-Cookie header in the HTTP response.
Step 2: Manage Sessions
Store Session Data: Store session data (e.g., session ID and user information) in a session store (e.g., in-memory map or database).
Validate Session: For subsequent requests, validate the session ID from the Cookie header.
Step 3: Transfer Cookies
Set-Cookie Header: Use the Set-Cookie header to send cookies to the client.
Cookie Header: Parse the Cookie header from incoming requests to retrieve session information.*/


#include <map>
#include <string>
#include <sstream>
#include <ctime>
#include <cstdlib>

// Simulated user database
std::map<std::string, std::string> userDatabase = {
    {"user1", "password1"},
    {"user2", "password2"}
};

// Simulated session store
std::map<std::string, std::string> sessionStore;

std::string generateSessionID() {
    std::stringstream ss;
    ss << std::time(0) << rand();
    return ss.str();
}

void handleLoginRequest(const std::string& username, const std::string& password, std::string& responseHeaders) {
    if (userDatabase.find(username) != userDatabase.end() && userDatabase[username] == password) {
        std::string sessionID = generateSessionID();
        sessionStore[sessionID] = username;

        // Set-Cookie header to transfer the session ID
        responseHeaders += "Set-Cookie: sessionID=" + sessionID + "; HttpOnly; Path=/\r\n";
    } else {
        // Authentication failed
        responseHeaders += "HTTP/1.1 401 Unauthorized\r\n";
    }
}


bool validateSession(const std::string& sessionID) {
    return sessionStore.find(sessionID) != sessionStore.end();
}

std::string getUsernameFromSession(const std::string& sessionID) {
    if (validateSession(sessionID)) {
        return sessionStore[sessionID];
    }
    return "";
}


void handleRequest(const std::string& request, std::string& responseHeaders) {
    // Parse the request to extract cookies
    std::string sessionID;
    size_t pos = request.find("Cookie: ");
    if (pos != std::string::npos) {
        size_t end = request.find("\r\n", pos);
        std::string cookies = request.substr(pos + 8, end - pos - 8);
        size_t sessionPos = cookies.find("sessionID=");
        if (sessionPos != std::string::npos) {
            sessionID = cookies.substr(sessionPos + 10);
        }
    }

    // Validate session
    if (validateSession(sessionID)) {
        std::string username = getUsernameFromSession(sessionID);
        responseHeaders += "HTTP/1.1 200 OK\r\n";
        responseHeaders += "Content-Type: text/html\r\n\r\n";
        responseHeaders += "<html><body>Welcome, " + username + "!</body></html>";
    } else {
        responseHeaders += "HTTP/1.1 401 Unauthorized\r\n";
    }
}


/*Explanation
Login Request Handling: The handleLoginRequest function authenticates the user and sets a session ID in the Set-Cookie header if authentication is successful.
Session Management: The validateSession and getUsernameFromSession functions manage and validate sessions using a session store.
Cookie Transfer: The handleRequest function parses the Cookie header from incoming requests to retrieve the session ID and validate the session.
By following these steps, you can implement a basic login system and transfer cookies in your web server. This example uses a simple in-memory session store for demonstration purposes. In a production environment, you would typically use a more robust session management system, such as a database or a dedicated session store like Redis.*/